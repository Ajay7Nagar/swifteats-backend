openapi: 3.0.3
info:
  title: SwiftEats API
  version: "0.1.0"
  description: |
    Initial OpenAPI specification for SwiftEats covering order lifecycle,
    restaurant/menu browse, and driver location ingestion/read.
servers:
  - url: http://localhost:8080
    description: Local Spring Boot server
tags:
  - name: orders
    description: Order creation and lifecycle
  - name: catalog
    description: Restaurant browse and menu retrieval
  - name: drivers
    description: Driver session and location updates
  - name: auth
    description: User registration and authentication

security:
  - bearer-jwt: []

paths:
  /orders:
    post:
      tags: [orders]
      summary: Create a new order
      description: Accepts a new customer order and initiates mocked payment processing asynchronously.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreateRequest'
            example:
              customerId: "00000000-0000-0000-0000-000000000009"
              restaurantId: "00000000-0000-0000-0000-000000000001"
              currency: "INR"
              items:
                - menuItemId: "10000000-0000-0000-0000-000000000001"
                  nameSnapshot: "Fixture Item"
                  quantity: 1
                  unitPrice: 100.0
                  totalPrice: 100.0
      responses:
        '201':
          description: Order accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderCreateResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /orders/{orderId}:
    get:
      tags: [orders]
      summary: Get order by id
      parameters:
        - $ref: '#/components/parameters/OrderId'
      responses:
        '200':
          description: Current order state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /orders/{orderId}/transition:
    post:
      tags: [orders]
      summary: Apply an order state transition
      parameters:
        - $ref: '#/components/parameters/OrderId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderTransitionRequest'
            examples:
              confirm:
                summary: Confirm order
                value:
                  action: confirm
              deliver_invalid_example:
                summary: Invalid transition example (may yield 409 depending on state)
                value:
                  action: deliver
      responses:
        '200':
          description: Transition accepted; returns updated order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Invalid transition for current state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /restaurants:
    get:
      tags: [catalog]
      summary: List restaurants
      security: []
      parameters:
        - in: query
          name: city
          schema:
            type: string
          description: Filter by city
        - in: query
          name: state
          schema:
            type: string
          description: Filter by state
        - in: query
          name: tags
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
          description: Filter by tags (repeatable)
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
      responses:
        '200':
          description: Restaurants page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestaurantListResponse'
              examples:
                example:
                  summary: Example response
                  value:
                    data:
                      - id: "00000000-0000-0000-0000-000000000001"
                        name: "Fixture Restaurant"
                        city: "Pune"
                        state: "MH"
                        isOpen: true
                    page: 1
                    pageSize: 20
                    total: 2

  /restaurants/{restaurantId}/menu:
    get:
      tags: [catalog]
      summary: Get menu for a restaurant
      security: []
      parameters:
        - $ref: '#/components/parameters/RestaurantId'
      responses:
        '200':
          description: Menu items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuResponse'
              examples:
                example:
                  summary: Example response
                  value:
                    restaurantId: "00000000-0000-0000-0000-000000000001"
                    items:
                      - id: "10000000-0000-0000-0000-000000000001"
                        restaurantId: "00000000-0000-0000-0000-000000000001"
                        name: "Fixture Item"
                        price: 100.0
                        available: true
        '404':
          description: Restaurant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /drivers/{driverId}/status:
    post:
      tags: [drivers]
      summary: Set driver online/offline status
      security:
        - bearer-jwt: []
      parameters:
        - $ref: '#/components/parameters/DriverId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DriverStatusRequest'
            examples:
              online:
                summary: Set driver online
                value:
                  status: online
              offline:
                summary: Set driver offline
                value:
                  status: offline
      responses:
        '200':
          description: Status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DriverStatusResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /drivers/{driverId}/location:
    post:
      tags: [drivers]
      summary: Ingest driver location update
      security:
        - bearer-jwt: []
      parameters:
        - $ref: '#/components/parameters/DriverId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DriverLocationUpdateRequest'
            example:
              orderId: "10000000-0000-0000-0000-000000000001"
              lat: 18.52
              lng: 73.86
              timestamp: "2025-08-28T10:24:44Z"
      responses:
        '202':
          description: Location accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DriverLocationAccepted'
        '400':
          description: Invalid coordinates/timestamp
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Driver offline or not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Rate limited (too frequent updates)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /orders/{orderId}/driver-location:
    get:
      tags: [drivers]
      summary: Get latest driver location for an order
      parameters:
        - $ref: '#/components/parameters/OrderId'
  /auth/register:
    post:
      tags: [auth]
      summary: Register a new user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          description: Invalid input or email exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags: [auth]
      summary: Login and obtain JWT token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: JWT issued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      responses:
        '200':
          description: Latest location for order in a dispatchable state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DriverLocationResponse'
        '204':
          description: No location available for current order state
        '404':
          description: Order or driver not found for visibility
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearer-jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
    basic:
      type: http
      scheme: basic

  parameters:
    OrderId:
      in: path
      name: orderId
      required: true
      schema:
        type: string
        format: uuid
      description: Order identifier (UUID)
      example: "b161019b-f745-4eb4-b126-4f40868035d7"
    RestaurantId:
      in: path
      name: restaurantId
      required: true
      schema:
        type: string
        format: uuid
      description: Restaurant identifier (UUID)
      example: "00000000-0000-0000-0000-000000000001"
    DriverId:
      in: path
      name: driverId
      required: true
      schema:
        type: string
        format: uuid
      description: Driver identifier (UUID)
      example: "20000000-0000-0000-0000-000000000001"
    Page:
      in: query
      name: page
      schema:
        type: integer
        minimum: 1
        default: 1
      description: Page number (1-based)
    PageSize:
      in: query
      name: pageSize
      schema:
        type: integer
        minimum: 1
        maximum: 200
        default: 20
      description: Page size

  schemas:
    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
          format: int32
        error:
          type: string
        message:
          type: string
        path:
          type: string
      required: [status, error]

    OrderCreateRequest:
      type: object
      properties:
        customerId:
          type: string
          format: uuid
        restaurantId:
          type: string
          format: uuid
        currency:
          type: string
          minLength: 3
          maxLength: 3
        items:
          type: array
          minItems: 1
          items:
            type: object
            properties:
              menuItemId:
                type: string
                format: uuid
              nameSnapshot:
                type: string
              quantity:
                type: integer
                minimum: 1
              unitPrice:
                type: number
                format: double
              totalPrice:
                type: number
                format: double
            required: [menuItemId, nameSnapshot, quantity, unitPrice, totalPrice]
      required: [customerId, restaurantId, currency, items]

    OrderCreateResponse:
      type: object
      properties:
        orderId:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/OrderStatus'
      required: [orderId, status]

    OrderTransitionRequest:
      type: object
      properties:
        action:
          type: string
          enum: [confirm, assign_driver, pick_up, deliver, complete, cancel]
      required: [action]

    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
        customerId:
          type: string
          format: uuid
        restaurantId:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/OrderStatus'
        paymentStatus:
          $ref: '#/components/schemas/PaymentStatus'
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        totalAmount:
          type: number
          format: double
        currency:
          type: string
          minLength: 3
          maxLength: 3
        createdAt:
          type: string
          format: date-time
        version:
          type: integer
      required: [id, customerId, restaurantId, status, paymentStatus, items, totalAmount, currency, createdAt]

    OrderItem:
      type: object
      properties:
        menuItemId:
          type: string
          format: uuid
        nameSnapshot:
          type: string
        quantity:
          type: integer
        unitPrice:
          type: number
          format: double
        totalPrice:
          type: number
          format: double
      required: [menuItemId, nameSnapshot, quantity, unitPrice, totalPrice]

    OrderStatus:
      type: string
      enum: [created, confirmed, driver_assigned, picked_up, delivered, completed, cancelled]

    PaymentStatus:
      type: string
      enum: [pending, paid, failed]

    Restaurant:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        address:
          type: string
        city:
          type: string
        state:
          type: string
        tags:
          type: array
          items:
            type: string
        isOpen:
          type: boolean
        updatedAt:
          type: string
          format: date-time
      required: [id, name, city, state, isOpen]

    RestaurantListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Restaurant'
        page:
          type: integer
        pageSize:
          type: integer
        total:
          type: integer
      required: [data, page, pageSize]

    MenuItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        restaurantId:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: double
        available:
          type: boolean
        updatedAt:
          type: string
          format: date-time
      required: [id, restaurantId, name, price, available]

    MenuResponse:
      type: object
      properties:
        restaurantId:
          type: string
          format: uuid
        items:
          type: array
          items:
            $ref: '#/components/schemas/MenuItem'
      required: [restaurantId, items]

    DriverStatusRequest:
      type: object
      properties:
        status:
          type: string
          enum: [online, offline]
      required: [status]

    DriverStatusResponse:
      type: object
      properties:
        driverId:
          type: string
          format: uuid
        status:
          type: string
          enum: [online, offline]
      required: [driverId, status]

    DriverLocationUpdateRequest:
      type: object
      properties:
        lat:
          type: number
          minimum: -90
          maximum: 90
        lng:
          type: number
          minimum: -180
          maximum: 180
        timestamp:
          type: string
          format: date-time
        orderId:
          type: string
          format: uuid
        lastSeenTimestamp:
          type: string
          format: date-time
      required: [lat, lng, timestamp]

    DriverLocationAccepted:
      type: object
      properties:
        accepted:
          type: boolean
          example: true
        receivedAt:
          type: string
          format: date-time
      required: [accepted, receivedAt]

    DriverLocationResponse:
      type: object
      properties:
        driverId:
          type: string
          format: uuid
        orderId:
          type: string
          format: uuid
        lat:
          type: number
        lng:
          type: number
        timestamp:
          type: string
          format: date-time
      required: [driverId, lat, lng, timestamp]

    RegisterRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        mobile:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required: [firstName, lastName, mobile, email, password]

    RegisterResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
      required: [id, firstName, lastName, email]

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required: [email, password]

    LoginResponse:
      type: object
      properties:
        token:
          type: string
      required: [token]



