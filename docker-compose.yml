services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: swifteats-postgres
    environment:
      POSTGRES_DB: swifteats
      POSTGRES_USER: swifteats_user
      POSTGRES_PASSWORD: swifteats_password
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - swifteats-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U swifteats_user -d swifteats"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: swifteats-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - swifteats-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Apache Kafka (Zookeeper + Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: swifteats-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - swifteats-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: swifteats-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
    networks:
      - swifteats-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  # SwiftEats Application
  swifteats-app:
    build: .
    container_name: swifteats-backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      # Database Configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/swifteats
      SPRING_DATASOURCE_USERNAME: swifteats_user
      SPRING_DATASOURCE_PASSWORD: swifteats_password
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      
      # JPA Configuration
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      SPRING_JPA_SHOW_SQL: false
      
      # Redis Configuration
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      
      # Kafka Configuration
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      
      # Application Configuration
      SWIFTEATS_SIMULATOR_ENABLED: true
      SWIFTEATS_SIMULATOR_DRIVER_COUNT: 50
      SWIFTEATS_SIMULATOR_EVENTS_PER_SECOND: 10
      
      # JVM Configuration for performance
      JAVA_OPTS: >-
        -Xms512m 
        -Xmx2g 
        -XX:+UseG1GC 
        -XX:MaxGCPauseMillis=200 
        -XX:+UseStringDeduplication
        
    volumes:
      - app_logs:/app/logs
    networks:
      - swifteats-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: swifteats-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - swifteats-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: swifteats-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - swifteats-network

  # Nginx for load balancing (for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: swifteats-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - swifteats-app
    networks:
      - swifteats-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  app_logs:
    driver: local

networks:
  swifteats-network:
    driver: bridge
